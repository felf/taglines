#!/usr/bin/python
# -*- coding: utf-8 -*-

# Preamble {{{1
""" Entry point for the Taglines program. """

from __future__ import print_function
import taglines
from taglines.ArgParser import ArgParser
from taglines.ShellUI import ShellUI, input

import os
from datetime import date

def init_database(filepath):  # {{{1
    """ create a new sqlite database file """

    if os.path.exists(filepath):
        ok = input("Warning: "+filepath+" already exists. Overwrite? [y/N] ")
        if ok and "yes".startswith(ok.lower()):
            try:
                os.remove(filepath)
            except OSError as e:
                exit("Error: could not delete old file: {}. Exiting.".format(
                     e.args[1]))
        else:
            print("good bye")
            exit(1)
    db = taglines.Database()
    if db:
        db.initialiseFile(filepath)
        return True
    return False

def get_random_item(args):  # {{{1
    """ retrieve one random tagline """

    db = taglines.Database(args.file)
    if db:
        db.parseArguments(args)
        tl = db.randomTagline()
        if tl:
            print(tl)
        return True
    return False

def list_items(args):  # {{{1
    """ show list of taglines """

    db = taglines.Database(args.file)
    if db:
        db.parseArguments(args)

        first = True
        for r in db.taglines():
            if first:
                first = False
            else:
                print("%")
            print(r[0])
        return True
    return False

def show_tags(filepath):  # {{{1
    """ print all tags, sorted alphabetically """

    db = taglines.Database(filepath)
    if db:
        for tag in db.tags(orderByName=True):
            print(tag)
        return True
    return False


def show_authors(filepath):  # {{{1
    """ print all authors, sorted alphabetically """

    db = taglines.Database(filepath)
    if db:
        for author in db.authors():
            print(author)
        return True
    return False

def show_stats(filepath):  # {{{1
    """ print tabular statistics about the given database file """

    db = taglines.Database(filepath)
    if db:
        stats = db.stats()

        print("Number of taglines:        {:6d}".format(stats["tagline count"],))
        print("Number of texts:           {:6d}   (ø {:5.2f} per tagline)".format(
            stats["line count"], stats["line count"]/stats["tagline count"]))
        print("Average text length:       {:8.1f}".format(stats["avg tagline length"],))
        print("Number of tags:            {:6d}".format(stats["tag count"],))
        print("Number of tag assignments: {:6d}   (ø {:5.2f} per tagline)".format(
            stats["tag assignments"], stats["tag assignments"]/stats["tagline count"]))
        print("Number of authors:         {:6d}".format(stats["author count"],))
        print("Used languages:            {:6d}".format(stats["language count"],))
        return True
    return False

def interactive_menu(filepath):  # {{{1
    """ start interactive console menu mode and exit at the end """

    try:
        db = taglines.Database(filepath)
        if db:
            shell = ShellUI(db)
        shell.mainMenu()
    except Exception as e:
        print(sys.exc_info()[1])
        return False
    return True


if __name__ == "__main__":  # {{{1
    parser = ArgParser()
    args = parser.args

    result = True
    try:
        if args.init:
            result = init_database(args.file)

        if args.random:
            result = get_random_item(args)

        if args.list:
            result = list_items(args)

        if args.show_tags:
            result = show_tags(args.file)

        if args.show_authors:
            result = show_authors(args.file)

        if args.stats:
            result = show_stats(args.file)

        if args.interactive:
            result = interactive_menu(args.file)
    except Exception as error:
        from sys import stderr
        print(error, file=stderr)
        result = False

    if result:
        exit(0)
    else:
        exit(1)
