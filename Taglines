#!/usr/bin/python
# -*- coding: utf-8 -*-

# Preamble {{{1
""" Entry point for the Taglines program. """

from __future__ import print_function, division
from taglines.ArgParser import parse_arguments
from taglines.Database import Database
from taglines.ShellUI import ShellUI

import os

def init_database(filepath):  # {{{1
    """ Create a new sqlite database file. """

    if os.path.exists(filepath):
        ok = ShellUI.get_input(
            "Warning: "+filepath+" already exists. Overwrite? [y/N] ")
        if ok and "yes".startswith(ok.lower()):
            try:
                os.remove(filepath)
            except OSError as error:
                exit("Error: could not delete old file: {}. Exiting.".format(
                    error.args[1]))
        else:
            print("good bye")
            exit(1)
    try:
        db = Database()
        if db:
            db.initialise_file(filepath)
            return True
    except Database.DatabaseError as error:
        print("Error initialising database: {}.".format(
            error.args[0]))

    return False

def get_random_item(_args):  # {{{1
    """ Retrieve one random tagline. """

    db = Database(_args.file)
    if db:
        db.parse_arguments(_args)
        tagline = db.random_tagline()
        if tagline:
            print(tagline)
        return True
    return False

def list_items(_args):  # {{{1
    """ Show list of taglines. """

    db = Database(_args.file)
    if db:
        db.parse_arguments(_args)

        first = True
        for row in db.taglines():
            if first:
                first = False
            else:
                print("%")
            print(row[0])
        return True
    return False

def show_keywords(filepath):  # {{{1
    """ Print all keywords, sorted alphabetically. """

    db = Database(filepath)
    if db:
        for keyword in db.keywords(by_name=True):
            print(keyword)
        return True
    return False


def show_authors(filepath):  # {{{1
    """ Print all authors, sorted alphabetically. """

    db = Database(filepath)
    if db:
        for author in db.authors():
            print(author)
        return True
    return False

def show_stats(filepath):  # {{{1
    """ Print tabular statistics about the given database file. """

    db = Database(filepath)
    if db:
        stats = db.stats()

        labels = [
                "Database schema version:",
                "Number of taglines:",
                "Number of texts:",
                "Average text length:",
                "Number of keywords:",
                "Number of keyword assignments:",
                "Number of authors:",
                "Used languages:",
                ]

        values = [
                "unknown" if stats["schema version"] is None else
                    "{:6d}".format(stats["schema version"]),
                "{:6d}".format(stats["tagline count"],),
                "{:6d}   (ø {:5.2f} per tagline)".format(
                    stats["line count"],
                    stats["line count"]/stats["tagline count"] if
                        stats["line count"] != 0 else 0),
                "{:8.1f}".format(stats["avg tagline length"],),
                "{:6d}".format(stats["keyword count"],),
                "{:6d}   (ø {:5.2f} per tagline)".format(
                    stats["keyword assignments"],
                    stats["keyword assignments"]/stats["tagline count"] if
                        stats["tagline count"] != 0 else 0),
                "{:6d}".format(stats["author count"],),
                "{:6d}".format(stats["language count"],),
                ]

        maxlabelwidth = max(len(label) for label in labels)
        for keyval in zip(labels, values):
            print("{label:{width}} {value}".format(
                label=keyval[0], width=maxlabelwidth, value=keyval[1]))
        return True
    return False

def interactive_menu(filepath, editor):  # {{{1
    """ Start interactive console menu mode and exit at the end. """

    try:
        db = Database(filepath)
        if db:
            shell = ShellUI(db, editor)
        result = shell.main_menu()

    except Exception:
        raise
        import sys
        print(sys.exc_info()[1])
        result = False
    return result


def main():  # {{{1
    args = parse_arguments()

    result = None
    try:
        if args.init:
            result = init_database(args.file)

        if args.random:
            result = get_random_item(args)

        if args.list:
            result = list_items(args)

        if args.show_keywords:
            result = show_keywords(args.file)

        if args.show_authors:
            result = show_authors(args.file)

        if args.stats:
            result = show_stats(args.file)

        if args.interactive:
            result = interactive_menu(args.file, args.editor)

    except Exception as error:
        raise
        from sys import stderr
        print(error, file=stderr)
        result = False

    if result is None:
        exit(-1)
    elif result:
        exit(0)
    else:
        exit(1)

if __name__ == "__main__":  # {{{1
    main()
